{"version":3,"sources":["../src/index.ts","../src/provider.tsx","../src/hooks.ts"],"sourcesContent":["export { PromptProvider, usePrompt } from \"./provider\";\r\nexport { useToast, useDialogs, useModal, useBareModal } from \"./hooks\";\r\nexport type { PromptProviderProps, PromptContextValue, PromptTheme } from \"./types\";\r\n","import * as React from \"react\";\r\nimport {\r\n  config,\r\n  Modal,\r\n  toast,\r\n  alert,\r\n  confirm,\r\n  question,\r\n  prompt,\r\n  i18n,\r\n  version\r\n} from \"@tlabsinc/promptjs-core\";\r\nimport type { PromptContextValue, PromptProviderProps, PromptTheme } from \"./types\";\r\n\r\nconst hasWindow = () => typeof window !== \"undefined\";\r\n\r\nconst Ctx = React.createContext<PromptContextValue | null>(null);\r\n\r\nexport const PromptProvider: React.FC<PromptProviderProps> = ({\r\n  children,\r\n  theme = \"auto\",\r\n  scope = false,\r\n  zIndexBase = 2000\r\n}) => {\r\n  const hostRef = React.useRef<HTMLDivElement | null>(null);\r\n\r\n  // Keep PromptJS theme synced with prop\r\n  React.useEffect(() => {\r\n    if (!hasWindow()) return;\r\n    config.update({ theme });\r\n  }, [theme]);\r\n\r\n  // Optionally scope PromptJS portals to this providerâ€™s subtree\r\n  React.useEffect(() => {\r\n    if (!hasWindow()) return;\r\n\r\n    if (scope) {\r\n      const host = hostRef.current!;\r\n      const prev = config.get();\r\n      config.update({ container: host, zIndexBase });\r\n      return () => {\r\n        // restore previous container and zIndexBase on unmount\r\n        config.update({ container: null, zIndexBase: prev.zIndexBase });\r\n      };\r\n    }\r\n    // if not scoped, nothing to manage\r\n    return;\r\n  }, [scope, zIndexBase]);\r\n\r\n  const value = React.useMemo<PromptContextValue>(\r\n    () => ({ config, Modal, toast, alert, confirm, question, prompt, i18n, version }),\r\n    []\r\n  );\r\n\r\n  // Always render a wrapper div so `scope` can be toggled without remounting children.\r\n  return (\r\n    <Ctx.Provider value={value}>\r\n      <div ref={hostRef} style={scope ? { position: \"relative\" } : undefined}>\r\n        {children}\r\n      </div>\r\n    </Ctx.Provider>\r\n  );\r\n};\r\n\r\nexport function usePrompt(): PromptContextValue {\r\n  const ctx = React.useContext(Ctx);\r\n  if (!ctx) {\r\n    // Allow hooks to work without a provider by returning the core API directly.\r\n    // This keeps usage friction very low.\r\n    return { config, Modal, toast, alert, confirm, question, prompt, i18n, version };\r\n  }\r\n  return ctx;\r\n}\r\n","import * as React from \"react\";\r\nimport { toast as coreToast, Modal, alert, confirm, question, prompt } from \"@tlabsinc/promptjs-core\";\r\nimport type { PromptContextValue } from \"./types\";\r\nimport { usePrompt } from \"./provider\";\r\n\r\n/** Stable toast callback for use in React components. */\r\nexport function useToast() {\r\n  // Use context when available; fall back to core\r\n  const ctx = usePrompt() as PromptContextValue;\r\n  return React.useCallback((opts: Parameters<typeof coreToast>[0]) => {\r\n    return ctx.toast(opts);\r\n  }, [ctx]);\r\n}\r\n\r\n/** Handy helpers for dialogs in React event handlers. */\r\nexport function useDialogs() {\r\n  const ctx = usePrompt();\r\n  return React.useMemo(() => {\r\n    return {\r\n      alert: ctx.alert,\r\n      confirm: ctx.confirm,\r\n      question: ctx.question,\r\n      prompt: ctx.prompt\r\n    };\r\n  }, [ctx]);\r\n}\r\n\r\n/**\r\n * Optional: open a modal from React with a stable callback,\r\n * returning the instance handle if you need to update/close it.\r\n */\r\nexport function useModal() {\r\n  const ctx = usePrompt();\r\n  return React.useCallback((opts: Parameters<typeof Modal.open>[0]) => {\r\n    return ctx.Modal.open(opts);\r\n  }, [ctx]);\r\n}\r\n\r\n/**\r\n * Hook for mounting custom content in a minimal modal wrapper.\r\n * Returns stable callbacks for both bare() and mount() (they're aliases).\r\n */\r\nexport function useBareModal() {\r\n  const ctx = usePrompt();\r\n  return React.useMemo(() => ({\r\n    bare: (opts: Parameters<typeof Modal.bare>[0]) => ctx.Modal.bare(opts),\r\n    mount: (opts: Parameters<typeof Modal.bare>[0]) => ctx.Modal.mount(opts)\r\n  }), [ctx]);\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,YAAuB;AACvB,2BAUO;AA8CD;AA3CN,IAAM,YAAY,MAAM,OAAO,WAAW;AAE1C,IAAM,MAAY,oBAAyC,IAAI;AAExD,IAAM,iBAAgD,CAAC;AAAA,EAC5D;AAAA,EACA,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,aAAa;AACf,MAAM;AACJ,QAAM,UAAgB,aAA8B,IAAI;AAGxD,EAAM,gBAAU,MAAM;AACpB,QAAI,CAAC,UAAU,EAAG;AAClB,gCAAO,OAAO,EAAE,MAAM,CAAC;AAAA,EACzB,GAAG,CAAC,KAAK,CAAC;AAGV,EAAM,gBAAU,MAAM;AACpB,QAAI,CAAC,UAAU,EAAG;AAElB,QAAI,OAAO;AACT,YAAM,OAAO,QAAQ;AACrB,YAAM,OAAO,4BAAO,IAAI;AACxB,kCAAO,OAAO,EAAE,WAAW,MAAM,WAAW,CAAC;AAC7C,aAAO,MAAM;AAEX,oCAAO,OAAO,EAAE,WAAW,MAAM,YAAY,KAAK,WAAW,CAAC;AAAA,MAChE;AAAA,IACF;AAEA;AAAA,EACF,GAAG,CAAC,OAAO,UAAU,CAAC;AAEtB,QAAM,QAAc;AAAA,IAClB,OAAO,EAAE,qCAAQ,mCAAO,mCAAO,mCAAO,uCAAS,yCAAU,qCAAQ,iCAAM,sCAAQ;AAAA,IAC/E,CAAC;AAAA,EACH;AAGA,SACE,4CAAC,IAAI,UAAJ,EAAa,OACZ,sDAAC,SAAI,KAAK,SAAS,OAAO,QAAQ,EAAE,UAAU,WAAW,IAAI,QAC1D,UACH,GACF;AAEJ;AAEO,SAAS,YAAgC;AAC9C,QAAM,MAAY,iBAAW,GAAG;AAChC,MAAI,CAAC,KAAK;AAGR,WAAO,EAAE,qCAAQ,mCAAO,mCAAO,mCAAO,uCAAS,yCAAU,qCAAQ,iCAAM,sCAAQ;AAAA,EACjF;AACA,SAAO;AACT;;;ACxEA,IAAAA,SAAuB;AAMhB,SAAS,WAAW;AAEzB,QAAM,MAAM,UAAU;AACtB,SAAa,mBAAY,CAAC,SAA0C;AAClE,WAAO,IAAI,MAAM,IAAI;AAAA,EACvB,GAAG,CAAC,GAAG,CAAC;AACV;AAGO,SAAS,aAAa;AAC3B,QAAM,MAAM,UAAU;AACtB,SAAa,eAAQ,MAAM;AACzB,WAAO;AAAA,MACL,OAAO,IAAI;AAAA,MACX,SAAS,IAAI;AAAA,MACb,UAAU,IAAI;AAAA,MACd,QAAQ,IAAI;AAAA,IACd;AAAA,EACF,GAAG,CAAC,GAAG,CAAC;AACV;AAMO,SAAS,WAAW;AACzB,QAAM,MAAM,UAAU;AACtB,SAAa,mBAAY,CAAC,SAA2C;AACnE,WAAO,IAAI,MAAM,KAAK,IAAI;AAAA,EAC5B,GAAG,CAAC,GAAG,CAAC;AACV;AAMO,SAAS,eAAe;AAC7B,QAAM,MAAM,UAAU;AACtB,SAAa,eAAQ,OAAO;AAAA,IAC1B,MAAM,CAAC,SAA2C,IAAI,MAAM,KAAK,IAAI;AAAA,IACrE,OAAO,CAAC,SAA2C,IAAI,MAAM,MAAM,IAAI;AAAA,EACzE,IAAI,CAAC,GAAG,CAAC;AACX;","names":["React"]}